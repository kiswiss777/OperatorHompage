{"ast":null,"code":"var _jsxFileName = \"/Users/kimtaehyun/Desktop/\\u1111\\u1173\\u1105\\u1169\\u1100\\u1173\\u1105\\u1162\\u1106\\u1175\\u11BC/front/front/src/Components/Movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"./fakemovieservice\";\nimport { getGenres } from \"./fakegenreservice\";\nimport Pagination from \"./pagination\";\nimport _ from \"lodash\";\nimport paginate from \"react-paginate\";\nimport ListGroup from \"./ListGroup\";\nimport MoviesTable from \"./MoviesTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Movies extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //영화 데이터를 담는 어레이\n      movies: [],\n      //장르 데이터를 담는 어레이\n      genres: [],\n      //한 페이지의 몇개의 영화를 보여줄것인가\n      pageNumber: 4,\n      //현재 페이지\n      currentPage: 1,\n      //현재 분류(장르 아님 table head 분류) + 오른차순 정렬이냐 내림차순 정렬이냐\n      sortColumn: {\n        path: \"title\",\n        order: 'asc'\n      }\n    };\n    this.deleteHandler = movie => {\n      const movies = [...this.state.movies];\n      const i = movies.indexOf(movie);\n      movies.splice(i, 1);\n      this.setState({\n        movies\n      });\n    };\n    this.likeHandler = movie => {\n      const movies = [...this.state.movies];\n      const i = movies.indexOf(movie);\n\n      //좋아요 라고 하는 property를 원래 영화 데이터에 추가를 하고 해당 property가 있으면 반대의 값을\n\n      movie.like = !movie.like;\n      movies[i] = movie;\n      this.setState({\n        movies\n      });\n    };\n    this.pageHandler = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n    this.genreHandler = genre => {\n      this.setState({\n        currentGenre: genre,\n        currentPage: 1\n      });\n    };\n    this.sortHandler = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n    this.paginate = (currentPage, totalItem, pageNumber) => {\n      const currentIndex = (currentPage - 1) * pageNumber;\n      const array = _(totalItem).slice(currentIndex, currentIndex + pageNumber).value();\n      return array;\n    };\n    this.getPagedData = () => {\n      const {\n        movies,\n        pageNumber,\n        currentPage,\n        currentGenre,\n        sortColumn\n      } = this.state;\n      const filteredmovies =\n      //먼저 선택된 장르에 맞는 영화 목록들만 불러온다 선택된 장르가 없거나 all genre가 선택이 되었을경우\n      currentGenre && currentGenre._id ? movies.filter(movie => movie.genre._id === currentGenre._id) : movies;\n\n      //불러와진 영화목록들을 또 분류에 맞게 sorting해줌\n      const sortedmovies = _.orderBy(filteredmovies, sortColumn.path, sortColumn.order);\n\n      //페이징\n      const paginatedmovies = paginate(currentPage, sortedmovies, pageNumber);\n      return {\n        data: paginatedmovies,\n        count: sortedmovies.length\n      };\n    };\n  }\n  //react의 생명주기중 하나인 componentDidMount에서 json데이터들을 불러온다.\n  componentDidMount() {\n    let tempGenre = [{\n      _id: \"\",\n      name: \"All Genres\"\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres: tempGenre\n    });\n  }\n\n  //영화 삭제 이부분은 ES6 기능중 하나인 스프레드 연산자를 이용하였다.\n\n  render() {\n    const {\n      movies,\n      pageNumber,\n      currentPage,\n      genres,\n      currentGenre,\n      sortColumn\n    } = this.state;\n\n    //보여지는 영화목록이 없을경우\n    if (movies.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no movies in the database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }, this);\n    const {\n      data,\n      count\n    } = this.getPagedData();\n    // eslint-disable-next-line\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-2\",\n        children: [\"//\\uC7A5\\uB974 \\uCEF4\\uD3EC\\uB10C\\uD2B8\", /*#__PURE__*/_jsxDEV(ListGroup, {\n          genres: genres,\n          onClick: this.genreHandler,\n          currentGenre: currentGenre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"There are \", count, \" movies in the database\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), \"//\\uD14C\\uC774\\uBE14 \\uCEF4\\uD3EC\\uB10C\\uD2B8\", /*#__PURE__*/_jsxDEV(MoviesTable, {\n          data: data,\n          onLike: this.likeHandler,\n          onDelete: this.deleteHandler,\n          onSort: this.sortHandler,\n          sortColumn: sortColumn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), \"//\\uD398\\uC774\\uC9D5 \\uCEF4\\uD3EC\\uB10C\\uD2B8\", /*#__PURE__*/_jsxDEV(Pagination, {\n          onClick: this.pageHandler,\n          pageNumber: pageNumber,\n          count: count,\n          currentPage: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Movies;","map":{"version":3,"names":["React","Component","getMovies","getGenres","Pagination","_","paginate","ListGroup","MoviesTable","Movies","state","movies","genres","pageNumber","currentPage","sortColumn","path","order","deleteHandler","movie","i","indexOf","splice","setState","likeHandler","like","pageHandler","page","genreHandler","genre","currentGenre","sortHandler","totalItem","currentIndex","array","slice","value","getPagedData","filteredmovies","_id","filter","sortedmovies","orderBy","paginatedmovies","data","count","length","componentDidMount","tempGenre","name","render"],"sources":["/Users/kimtaehyun/Desktop/프로그래밍/front/front/src/Components/Movies.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport { getMovies } from \"./fakemovieservice\";\nimport { getGenres } from \"./fakegenreservice\";\nimport Pagination from \"./pagination\";\nimport _ from \"lodash\";\nimport paginate from \"react-paginate\";\nimport ListGroup from \"./ListGroup\";\nimport MoviesTable from \"./MoviesTable\";\n \nclass Movies extends Component {\n  state = {\n//영화 데이터를 담는 어레이\n    movies: [],\n//장르 데이터를 담는 어레이\n    genres: [],\n//한 페이지의 몇개의 영화를 보여줄것인가\n    pageNumber: 4,\n//현재 페이지\n    currentPage: 1,\n//현재 분류(장르 아님 table head 분류) + 오른차순 정렬이냐 내림차순 정렬이냐\n    sortColumn: {path:\"title\", order:'asc'}\n  };\n \n//react의 생명주기중 하나인 componentDidMount에서 json데이터들을 불러온다.\n  componentDidMount() {\n    let tempGenre = [{ _id: \"\", name: \"All Genres\" }, ...getGenres()];\n    this.setState({ movies: getMovies(), genres: tempGenre });\n  }\n \n//영화 삭제 이부분은 ES6 기능중 하나인 스프레드 연산자를 이용하였다.\n  deleteHandler = movie => {\n \n    const movies = [...this.state.movies];\n    const i = movies.indexOf(movie);\n    movies.splice(i, 1);\n    this.setState({ movies });\n  };\n \n//좋아요 기능\n  likeHandler = movie => {\n    const movies = [...this.state.movies];\n    const i = movies.indexOf(movie);\n \n//좋아요 라고 하는 property를 원래 영화 데이터에 추가를 하고 해당 property가 있으면 반대의 값을\n\n    movie.like = !movie.like;\n    movies[i] = movie;\n    this.setState({ movies });\n  };\n//현재 페이지 선택 메소드\n  pageHandler = page => {\n    this.setState({ currentPage: page });\n  };\n//현재 장르 선택 메소드\n  genreHandler = genre => {\n    this.setState({ currentGenre: genre, currentPage: 1 });\n  };\n//현재 분류 선택 메소드\n  sortHandler = sortColumn => {\n   this.setState({sortColumn});\n  };\n \n//페이징\n\n paginate =(currentPage, totalItem, pageNumber) => {\n\n    const currentIndex = (currentPage-1)*pageNumber;\n\n    const array = _(totalItem).slice(currentIndex, currentIndex+pageNumber).value();\n\n    return array;\n\n }\n\n \n//페이징, 장르에 맞는 영화 목록들 불러오기\n  getPagedData = () => {\n \n    const {\n      movies,\n      pageNumber,\n      currentPage,\n      currentGenre,\n      sortColumn\n    } = this.state;\n \n    const filteredmovies =\n \n //먼저 선택된 장르에 맞는 영화 목록들만 불러온다 선택된 장르가 없거나 all genre가 선택이 되었을경우\n      currentGenre && currentGenre._id\n        ? movies.filter(movie => movie.genre._id === currentGenre._id)\n        : movies;\n \n//불러와진 영화목록들을 또 분류에 맞게 sorting해줌\n    const sortedmovies = _.orderBy(filteredmovies, sortColumn.path, sortColumn.order);\n \n//페이징\n    const paginatedmovies = paginate(currentPage, sortedmovies, pageNumber);\n    return {data:paginatedmovies, count:sortedmovies.length}\n  }\n \n  render() {\n    const {\n      movies,\n      pageNumber,\n      currentPage,\n      genres,\n      currentGenre,\n      sortColumn\n    } = this.state;\n \n//보여지는 영화목록이 없을경우\n    if (movies.length === 0) return <p>There are no movies in the database</p>;\n \n    const {data, count} = this.getPagedData();\n    // eslint-disable-next-line\n    return (\n      <div className=\"row\">\n        <div className=\"col-2\">\n \n //장르 컴포넌트\n          <ListGroup\n            genres={genres}\n            onClick={this.genreHandler}\n            currentGenre={currentGenre}\n          />\n        </div>\n        <div className=\"col\">\n          <p>There are {count} movies in the database</p>\n \n //테이블 컴포넌트\n          <MoviesTable\n            data={data}\n            onLike={this.likeHandler}\n            onDelete={this.deleteHandler}\n            onSort={this.sortHandler}\n            sortColumn={sortColumn}\n          />\n \n //페이징 컴포넌트\n          <Pagination\n            onClick={this.pageHandler}\n            pageNumber={pageNumber}\n            count={count}\n            currentPage={currentPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default Movies;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}