{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n/*\n Page 번호 나누는 작업 rowsPerPage는 한 페이지당 몇개의 row를 가지게 할 것인지에 따라 분류하는 작업\n*/\nconst calculateRange = (data, rowsPerPage) => {\n  const range = [];\n  const num = Math.ceil(data.length / rowsPerPage);\n  for (let i = 1; i <= num; i++) {\n    range.push(i);\n  }\n  return range;\n};\n\n/*\n Data List를 Page 번호에 따라 잘라서 반환하는 역할\n*/\nconst sliceData = (data, page, rowsPerPage) => {\n  return data.slice((page - 1) * rowsPerPage, page * rowsPerPage);\n};\n\n/*\n Hook 은 함수형 컴포넌트가 클래스형 컴포넌트의 기능을 사용할 수 있도록 해주는 기능이다. \n 특징적으로는 state와 lifecycle과 같은 기능을 사용 가능하게 해준다.\n */\nconst useTable = (data, page, rowsPerPage) => {\n  _s();\n  const [tableRange, setTableRange] = useState([]);\n  const [slice, setSlice] = useState([]);\n  /* useEffect에 대해서 더 공부 필요*/\n  useEffect(() => {\n    const range = calculateRange(data, rowsPerPage);\n    setTableRange([...range]);\n    const slice = sliceData(data, page, rowsPerPage);\n    setSlice([...slice]);\n  }, [data, setTableRange, page, setSlice]);\n  return {\n    slice,\n    range: tableRange\n  };\n};\n_s(useTable, \"6WC9h+Gz2mUecmNIQPN7Q27vSx4=\");\nexport default useTable;","map":{"version":3,"names":["useState","useEffect","calculateRange","data","rowsPerPage","range","num","Math","ceil","length","i","push","sliceData","page","slice","useTable","tableRange","setTableRange","setSlice"],"sources":["/Users/kimtaehyun/Desktop/프로그래밍/front/front/src/hooks/useTable.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n/*\n Page 번호 나누는 작업 rowsPerPage는 한 페이지당 몇개의 row를 가지게 할 것인지에 따라 분류하는 작업\n*/\nconst calculateRange = (data, rowsPerPage) => {\n    const range = [];\n    const num = Math.ceil(data.length / rowsPerPage);\n   \n    for (let i = 1; i <= num; i++) {\n      range.push(i);\n    }\n    return range;\n  };\n  \n  /*\n   Data List를 Page 번호에 따라 잘라서 반환하는 역할\n  */\n  const sliceData = (data, page, rowsPerPage) => {\n    return data.slice((page - 1) * rowsPerPage, page * rowsPerPage);\n  };\n\n  /*\n   Hook 은 함수형 컴포넌트가 클래스형 컴포넌트의 기능을 사용할 수 있도록 해주는 기능이다. \n   특징적으로는 state와 lifecycle과 같은 기능을 사용 가능하게 해준다.\n\n  */\n  const useTable = (data, page, rowsPerPage) => {\n    const [tableRange, setTableRange] = useState([]);\n    const [slice, setSlice] = useState([]);\n  /* useEffect에 대해서 더 공부 필요*/ \n    useEffect(() => {\n      const range = calculateRange(data, rowsPerPage);\n      setTableRange([...range]);\n  \n      const slice = sliceData(data, page, rowsPerPage);\n      setSlice([...slice]);\n    }, [data, setTableRange, page, setSlice]);\n  \n    return { slice, range: tableRange };\n  };\n  \n  export default useTable;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAACC,IAAI,EAAEC,WAAW,KAAK;EAC1C,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACL,IAAI,CAACM,MAAM,GAAGL,WAAW,CAAC;EAEhD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,GAAG,EAAEI,CAAC,EAAE,EAAE;IAC7BL,KAAK,CAACM,IAAI,CAACD,CAAC,CAAC;EACf;EACA,OAAOL,KAAK;AACd,CAAC;;AAED;AACF;AACA;AACE,MAAMO,SAAS,GAAG,CAACT,IAAI,EAAEU,IAAI,EAAET,WAAW,KAAK;EAC7C,OAAOD,IAAI,CAACW,KAAK,CAAC,CAACD,IAAI,GAAG,CAAC,IAAIT,WAAW,EAAES,IAAI,GAAGT,WAAW,CAAC;AACjE,CAAC;;AAED;AACF;AACA;AACA;AAEE,MAAMW,QAAQ,GAAG,CAACZ,IAAI,EAAEU,IAAI,EAAET,WAAW,KAAK;EAAA;EAC5C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,KAAK,EAAEI,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxC;EACEC,SAAS,CAAC,MAAM;IACd,MAAMI,KAAK,GAAGH,cAAc,CAACC,IAAI,EAAEC,WAAW,CAAC;IAC/Ca,aAAa,CAAC,CAAC,GAAGZ,KAAK,CAAC,CAAC;IAEzB,MAAMS,KAAK,GAAGF,SAAS,CAACT,IAAI,EAAEU,IAAI,EAAET,WAAW,CAAC;IAChDc,QAAQ,CAAC,CAAC,GAAGJ,KAAK,CAAC,CAAC;EACtB,CAAC,EAAE,CAACX,IAAI,EAAEc,aAAa,EAAEJ,IAAI,EAAEK,QAAQ,CAAC,CAAC;EAEzC,OAAO;IAAEJ,KAAK;IAAET,KAAK,EAAEW;EAAW,CAAC;AACrC,CAAC;AAAC,GAbID,QAAQ;AAed,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}